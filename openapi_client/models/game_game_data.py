# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GameGameData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'game': 'GameGameDataGame',
        'datetime': 'GameGameDataDatetime',
        'status': 'GameGameDataStatus',
        'teams': 'GameGameDataTeams',
        'players': 'Player',
        'venue': 'GameGameDataVenue'
    }

    attribute_map = {
        'game': 'game',
        'datetime': 'datetime',
        'status': 'status',
        'teams': 'teams',
        'players': 'players',
        'venue': 'venue'
    }

    def __init__(self, game=None, datetime=None, status=None, teams=None, players=None, venue=None):  # noqa: E501
        """GameGameData - a model defined in OpenAPI"""  # noqa: E501

        self._game = None
        self._datetime = None
        self._status = None
        self._teams = None
        self._players = None
        self._venue = None
        self.discriminator = None

        if game is not None:
            self.game = game
        if datetime is not None:
            self.datetime = datetime
        if status is not None:
            self.status = status
        if teams is not None:
            self.teams = teams
        if players is not None:
            self.players = players
        if venue is not None:
            self.venue = venue

    @property
    def game(self):
        """Gets the game of this GameGameData.  # noqa: E501


        :return: The game of this GameGameData.  # noqa: E501
        :rtype: GameGameDataGame
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this GameGameData.


        :param game: The game of this GameGameData.  # noqa: E501
        :type: GameGameDataGame
        """

        self._game = game

    @property
    def datetime(self):
        """Gets the datetime of this GameGameData.  # noqa: E501


        :return: The datetime of this GameGameData.  # noqa: E501
        :rtype: GameGameDataDatetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this GameGameData.


        :param datetime: The datetime of this GameGameData.  # noqa: E501
        :type: GameGameDataDatetime
        """

        self._datetime = datetime

    @property
    def status(self):
        """Gets the status of this GameGameData.  # noqa: E501


        :return: The status of this GameGameData.  # noqa: E501
        :rtype: GameGameDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GameGameData.


        :param status: The status of this GameGameData.  # noqa: E501
        :type: GameGameDataStatus
        """

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this GameGameData.  # noqa: E501


        :return: The teams of this GameGameData.  # noqa: E501
        :rtype: GameGameDataTeams
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this GameGameData.


        :param teams: The teams of this GameGameData.  # noqa: E501
        :type: GameGameDataTeams
        """

        self._teams = teams

    @property
    def players(self):
        """Gets the players of this GameGameData.  # noqa: E501


        :return: The players of this GameGameData.  # noqa: E501
        :rtype: Player
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this GameGameData.


        :param players: The players of this GameGameData.  # noqa: E501
        :type: Player
        """

        self._players = players

    @property
    def venue(self):
        """Gets the venue of this GameGameData.  # noqa: E501


        :return: The venue of this GameGameData.  # noqa: E501
        :rtype: GameGameDataVenue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this GameGameData.


        :param venue: The venue of this GameGameData.  # noqa: E501
        :type: GameGameDataVenue
        """

        self._venue = venue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameGameData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
