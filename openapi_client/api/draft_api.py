# coding: utf-8

"""
    NHL API

    Documenting the publicly accessible portions of the NHL API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class DraftApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_draft(self, **kwargs):  # noqa: E501
        """Get round-by-round data for current year&#39;s NHL Entry Draft.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_draft_with_http_info(self, **kwargs):  # noqa: E501
        """Get round-by-round data for current year&#39;s NHL Entry Draft.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/draft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Draft',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_draft_by_year(self, year, **kwargs):  # noqa: E501
        """Get round-by-round data for a specific year&#39;s NHL Entry Draft.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_by_year(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float year: The draft year. (required)
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_by_year_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_by_year_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def get_draft_by_year_with_http_info(self, year, **kwargs):  # noqa: E501
        """Get round-by-round data for a specific year&#39;s NHL Entry Draft.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_by_year_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float year: The draft year. (required)
        :return: Draft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in local_var_params or
                local_var_params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_draft_by_year`")  # noqa: E501

        if 'year' in local_var_params and not re.search('^\\d{4}$', local_var_params['year']):  # noqa: E501
            raise ValueError("Invalid value for parameter `year` when calling `get_draft_by_year`, must conform to the pattern `/^\\d{4}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/draft/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Draft',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_draft_prospect(self, id, **kwargs):  # noqa: E501
        """Get an NHL Entry Draft prospect.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_prospect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The prospect ID. (required)
        :return: DraftProspects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_prospect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_prospect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_draft_prospect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an NHL Entry Draft prospect.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_prospect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: The prospect ID. (required)
        :return: DraftProspects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft_prospect" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_draft_prospect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/draft/prospects/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DraftProspects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_draft_prospects(self, **kwargs):  # noqa: E501
        """Get all NHL Entry Draft prospects.  # noqa: E501

        Be forewarned that this endpoint returns a **lot** of data and there does not appear to be a way to paginate results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_prospects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DraftProspects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_prospects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_prospects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_draft_prospects_with_http_info(self, **kwargs):  # noqa: E501
        """Get all NHL Entry Draft prospects.  # noqa: E501

        Be forewarned that this endpoint returns a **lot** of data and there does not appear to be a way to paginate results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_prospects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: DraftProspects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft_prospects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/draft/prospects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DraftProspects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
